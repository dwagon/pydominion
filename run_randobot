#!/usr/bin/env python
""" Run randobot tests - play a game very randomly to see what errors pop up"""

import os
import subprocess
import sys
import multiprocessing
from collections import defaultdict


############################################################################################
def get_card_name(input_string: str) -> str:
    card = input_string.replace("ALL: Playing with ", "")
    if "(" in card:
        card = card.split("(")[0]
    if "as required" in card:
        card = card.split("as required")[0]
    return card.strip()


############################################################################################
def make_run(cardset: str | None = None, run: int | None = None) -> set[str]:
    """Run the game"""
    cards: set[str] = set()
    if cardset:
        cardset_name = cardset.replace("cardset/", "")
        cardset_args = ["--cardset", cardset]
    else:
        cardset_name = f"{run}"
        cardset_args = []
    players = ["--randobot", "4", "--numplayers", "4"]
    env_args: dict[str, str] = {
        "PYDOMINION_DEBUG": "1",
        "PYTHONPATH": ".",
        "PATH": os.environ["PATH"],
    }
    cmd: list[str] = ["./dominion/rungame.py", "--oldcards"]
    cmd.extend(players)
    cmd.extend(cardset_args)
    print(f"Playing with {cardset_name}")

    try:
        result = subprocess.run(
            env=env_args,
            args=cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            timeout=2,
            encoding="UTF-8",
        )
        stdout = result.stdout
    except subprocess.TimeoutExpired as exc:
        print(f"Timed out on {cardset_name}")
        stdout = "\n".join(str(exc.stdout).split(r"\n"))
    else:
        if result.returncode == 0:
            return set()
    output_file = f"/tmp/randobot_{cardset_name}.{os.getpid()}"
    with open(output_file, "w") as outfh:
        for line in stdout.splitlines():
            outfh.write(f"{line}\n")
            if line.startswith("ALL: Playing with"):
                card = get_card_name(line)
                cards.add(card)
    print(f"Broke playing with {cardset_name}")
    return cards


############################################################################################
def print_results(stats: dict[str, int]) -> None:
    results = sorted(stats.items(), key=lambda x: x[1])
    for card, num in results:
        print(card, num)


############################################################################################
def fill_num_queue(queue, num_runs: int = 0) -> None:
    """Fill the queue with a number of jobs"""
    for run in range(num_runs):
        queue.put({"run": run})


############################################################################################
def fill_cardset_queue(queue, card_sets: list[str]) -> None:
    """Fill the queue with cardset files"""
    for card_set_file in card_sets:
        if not os.path.isfile(card_set_file):
            continue
        queue.put({"cardset": card_set_file})


############################################################################################
def process_task(jq: multiprocessing.Queue):
    """Pull jobs out of the queue and run them - single process"""
    while True:
        job = jq.get()
        make_run(**job)
        if jq.empty():
            break


############################################################################################
def run_queue(job_queue: multiprocessing.Queue) -> None:
    """Spawn a number of processes (one per cpu) and then use them to run the hobs in the job_queue"""
    processes = []
    for cpu in range(os.cpu_count()):
        p = multiprocessing.Process(target=process_task, args=(job_queue,))
        processes.append(p)
        p.start()

    for p in processes:
        p.join()


############################################################################################
def main() -> None:
    """Do stuff"""
    os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))
    num_runs = 0
    card_stats: dict[str, int] = defaultdict(int)
    card_sets: list[str] = []
    job_queue = multiprocessing.Queue()

    if len(sys.argv) > 1:
        try:
            num_runs = int(sys.argv[1])
        except ValueError:
            card_sets = sys.argv[1:]
    else:
        card_sets = [os.path.join("cardset", _) for _ in os.listdir("cardset")]

    job_queue = multiprocessing.Queue()

    if num_runs:
        fill_num_queue(job_queue, num_runs)
    else:
        fill_cardset_queue(job_queue, card_sets)
    run_queue(job_queue)
    print_results(card_stats)


############################################################################################
if __name__ == "__main__":
    main()

# EOF
