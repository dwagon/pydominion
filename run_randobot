#!/usr/bin/env python
"""Run randobot tests - play a game very randomly to see what errors pop up"""

import argparse
import multiprocessing
import os
import random
import subprocess
from typing import Any


############################################################################################
def get_card_name(input_string: str) -> str:
    card = input_string.replace("ALL: Playing with ", "")
    if "(" in card:
        card = card.split("(")[0]
    if "as required" in card:
        card = card.split("as required")[0]
    return card.strip()


############################################################################################
def make_run(
    cardset: str | None = None,
    run: int | None = None,
    use_cards: list[str] | None = None,
) -> set[str]:
    """Run the game"""
    cmd: list[str] = ["./dominion/rungame.py", "--oldcards"]

    cards: set[str] = set()
    if cardset:
        cardset_name = cardset.replace("cardset/", "")
        cardset_args = ["--cardset", cardset]
    else:
        cardset_name = f"{run}"
        cardset_args = []
        if use_cards:
            for card in use_cards:
                cardset_args.extend(["--card", card])
        if random.randint(1, 10) == 1:  # Use events
            cmd.extend(["--num_events", str(random.randint(1, 2))])
        if random.randint(1, 10) == 1:  # Use landmarks
            cmd.extend(["--num_landmarks", str(random.randint(1, 2))])
        if random.randint(1, 10) == 1:  # Use projects
            cmd.extend(["--num_projects", str(random.randint(1, 2))])
        if random.randint(1, 10) == 1:  # Use traits
            cmd.extend(["--num_traits", "1"])
        if random.randint(1, 10) == 1:  # Use ways
            cmd.extend(["--num_ways", str(random.randint(1, 2))])
    players = ["--randobot", "4", "--numplayers", "4"]
    env_args: dict[str, str] = {
        "PYDOMINION_DEBUG": "1",
        "PYTHONPATH": ".",
        "PATH": os.environ["PATH"],
    }
    cmd.extend(players)
    cmd.extend(cardset_args)
    print(f"Playing with {cardset_name}")

    try:
        result = subprocess.run(
            env=env_args,
            args=cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            timeout=4,
            encoding="UTF-8",
        )
        stdout = result.stdout
    except subprocess.TimeoutExpired as exc:
        print(f"Timed out on {cardset_name}")
        stdout = "\n".join(str(exc.stdout).split(r"\n"))
    else:
        if result.returncode == 0:
            return set()
    output_file = f"/tmp/randobot_{cardset_name}.{os.getpid()}"
    with open(output_file, "w") as outfh:
        for line in stdout.splitlines():
            outfh.write(f"{line}\n")
            if line.startswith("ALL: Playing with"):
                card = get_card_name(line)
                cards.add(card)
    print(f"Broke playing with {cardset_name}")
    return cards


############################################################################################
def print_results(stats: dict[str, int]) -> None:
    results = sorted(stats.items(), key=lambda x: x[1])
    for card, num in results:
        print(card, num)


############################################################################################
def fill_num_queue(queue: Any, num_runs: int = 0, cards: list[str] | None = None) -> None:
    """Fill the queue with a number of jobs"""
    for run in range(num_runs):
        queue.put({"run": run, "use_cards": cards})


############################################################################################
def fill_cardset_queue(queue: Any, card_sets: list[str]) -> None:
    """Fill the queue with cardset files"""
    for card_set_file in card_sets:
        if not os.path.isfile(card_set_file):
            continue
        queue.put({"cardset": card_set_file})


############################################################################################
def process_task(jq: Any, stats_dict: dict[str, int]) -> None:
    """Pull jobs out of the queue and run them - runs in a thread"""
    while True:
        job = jq.get()
        cards = make_run(**job)
        for card in cards:
            if card not in stats_dict:
                stats_dict[card] = 0
            stats_dict[card] += 1
        if jq.empty():
            break


############################################################################################
def run_queue(job_queue: Any) -> dict[str, int]:
    """Spawn a number of processes (one per cpu) and then use them to run the hobs in the job_queue"""
    processes = []
    with multiprocessing.Manager() as manager:
        shared_dict = manager.dict()
        for cpu in range(multiprocessing.cpu_count()):
            p = multiprocessing.Process(target=process_task, args=(job_queue, shared_dict))
            processes.append(p)
            p.start()

        for p in processes:
            p.join()
        return dict(shared_dict)


############################################################################################
def parse_args() -> argparse.Namespace:
    """Parse command line args"""
    parser = argparse.ArgumentParser()
    parser.add_argument("numruns", type=int, nargs="?", help="How many random runs")
    parser.add_argument(
        "--cardsets",
        action="store_true",
        help="Run through all the cardsets defined",
    )
    parser.add_argument("--card", action="append", help="Specific cards to include")
    args = parser.parse_args()
    return args


############################################################################################
def main() -> None:
    """Do stuff"""
    os.chdir(os.path.normpath(os.path.join(os.path.abspath(__file__), os.pardir)))
    args = parse_args()
    job_queue: multiprocessing.Queue[dict[str, Any]] = multiprocessing.Queue()

    if args.numruns:
        fill_num_queue(job_queue, args.numruns, args.card)
    else:
        card_sets = [os.path.join("cardset", _) for _ in os.listdir("cardset")]
        fill_cardset_queue(job_queue, card_sets)
    card_stats: dict[str, int] = run_queue(job_queue)
    print_results(card_stats)


############################################################################################
if __name__ == "__main__":
    main()

# EOF
